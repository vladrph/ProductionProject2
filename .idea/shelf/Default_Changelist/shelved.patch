Index: src/productionproject/Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package productionproject;\r\n\r\nimport static productionproject.ItemType.AUDIO;\r\nimport static productionproject.ItemType.AUDIO_MOBILE;\r\nimport static productionproject.ItemType.NULL;\r\nimport static productionproject.ItemType.VISUAL;\r\nimport static productionproject.ItemType.VISUAL_MOBILE;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.OutputStream;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\n\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.fxml.FXML;\r\n\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.ChoiceBox;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.control.ListView;\r\nimport javafx.scene.control.PasswordField;\r\nimport javafx.scene.control.TableColumn;\r\nimport javafx.scene.control.TableView;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\n\r\nimport javafx.scene.input.MouseEvent;\r\n\r\nimport javafx.scene.text.Font;\r\n\r\n\r\n/**\r\n * This controller document has the contains the button and combo box events for the Production\r\n * Project2 GUI project.\r\n *\r\n * @author Vladimir Petit-Homme\r\n */\r\npublic class Controller {\r\n\r\n\r\n  @FXML\r\n  public ChoiceBox<ItemType> itemType;\r\n\r\n\r\n  @FXML\r\n  private ComboBox<Integer> comboBox = new ComboBox<>();\r\n\r\n\r\n  @FXML\r\n  private Button productButton;\r\n\r\n\r\n  @FXML\r\n  private Button recordButton;\r\n\r\n  @FXML\r\n  private TableView<Product> productTableView;\r\n\r\n  @FXML\r\n  ObservableList<Product> productLine = FXCollections\r\n      .observableArrayList();\r\n  @FXML\r\n  private TableColumn<?, ?> productNameCol;\r\n  @FXML\r\n  private TableColumn<?, ?> manufactureNameCol;\r\n  @FXML\r\n  private TableColumn<?, ?> typeNameCol;\r\n\r\n  @FXML\r\n  private TextField productInputField;\r\n\r\n  @FXML\r\n  private TextField manufactureInputField;\r\n  @FXML\r\n  private TextField employeeNameField;\r\n\r\n  @FXML\r\n  private PasswordField passwordInputField;\r\n  @FXML\r\n  private TextArea textArea;\r\n\r\n  @FXML\r\n\r\n  ObservableList<Product> produceline = FXCollections.observableArrayList();\r\n  @FXML\r\n  private\r\n  ListView<Product> listView = new ListView<>(produceline);\r\n  @FXML\r\n  private TextArea mediaTextArea;\r\n  @FXML\r\n  private TextArea employeeTextArea;\r\n\r\n  @FXML\r\n  private Button mediaButton;\r\n  private MouseEvent event;\r\n\r\n  Database database = new Database();\r\n\r\n  void retrieveInputDetails() {\r\n    productInputField.getText();\r\n    manufactureInputField.getText();\r\n    itemType.getValue();\r\n  }\r\n\r\n  void addToProductLine() {\r\n    productLine.add(new Widget(productInputField.getText(), manufactureInputField.getText(),\r\n        itemType.getValue()));\r\n  }\r\n\r\n  void addToProductDB() throws IOException, SQLException {\r\n    database.openDatabase();\r\n    database.stmt.executeUpdate(\r\n        \"INSERT INTO PRODUCT\" + \"(NAME, TYPE, MANUFACTURER)\" + \"VALUES ('\" + productInputField\r\n            .getText() + \"', '\" + itemType.getValue() + \"','\" + manufactureInputField.getText()\r\n            + \"', ) \");\r\n    database.closeDatabase();\r\n  }\r\n\r\n  void addToListViewProduceLine() {\r\n    produceline.add(new Widget(productInputField.getText(), manufactureInputField.getText(),\r\n        itemType.getValue()));\r\n  }\r\n\r\n  void clearInputField() {\r\n    productInputField.setText(\"\");   // clears text field\r\n\r\n    manufactureInputField.setText(\"\");  // clears text field\r\n\r\n    itemType.setValue(null); // clears Choice Box field\r\n  }\r\n\r\n  /**\r\n   * This method prints \" Test for button\" for the print product button.\r\n   *\r\n   * @param event This method currently prints to the console and establishes a Database\r\n   *              connection.\r\n   */\r\n  @FXML\r\n  void addProductButton(MouseEvent event) throws IOException, SQLException {\r\n    this.event = event;\r\n    addToProductDB();\r\n    retrieveInputDetails();\r\n    addToProductLine();\r\n    addToListViewProduceLine();\r\n    clearInputField();\r\n  }\r\n  /**\r\n   * This will be a new method to receive the Employee details.\r\n   */\r\n  void formatEmpTextArea() {\r\n\r\n    employeeTextArea.clear();\r\n\r\n    employeeTextArea\r\n        .setFont(new Font(\"Serif\", 12));\r\n  }\r\n  void cleanUpInputField() {\r\n    passwordInputField.clear();\r\n    employeeNameField.clear();\r\n  }\r\n\r\n  void createEmployee() {\r\n    String name = employeeNameField.getText();\r\n\r\n    String passWord = passwordInputField.getText();\r\n\r\n    if (employeeNameField.getText().equals(\"\") || passwordInputField.getText().equals(\"\")) {\r\n      name = \"ERROR\";\r\n      passWord = \"ERROR\";\r\n    }\r\n\r\n    Employee employee = new Employee(name, passWord);\r\n\r\n    employeeTextArea.appendText(employee.toString());\r\n  }\r\n  /**\r\n   * New Employee method that print out the employee information.\r\n   */\r\n  @FXML\r\n  void getEmployeeInfo(MouseEvent event3) {\r\n    this.event = event3;\r\n    formatEmpTextArea();\r\n    createEmployee();\r\n    cleanUpInputField();\r\n  }\r\n  /**\r\n   * This method prints the Production log info to the console.\r\n   */\r\n\r\n  void formatTextArea() {\r\n    textArea.setFont(new Font(\"Serif\", 12));\r\n  }\r\n\r\n  void productionTest() {\r\n    int comboNumber = Integer.parseInt(String\r\n        .valueOf(comboBox.getValue()));\r\n\r\n    Product listItems = listView.getSelectionModel()\r\n        .getSelectedItem();\r\n\r\n    Product productProduced = new Widget(listItems.getId(), listItems.getName(),\r\n        listItems.getManufacturer(), listItems.getType());\r\n\r\n    int itemCount = 0;\r\n\r\n    for (int productionRunProduct = 0; productionRunProduct < comboNumber; productionRunProduct++) {\r\n\r\n      ProductionRecord productLog = new ProductionRecord(listItems.getId(), productProduced,\r\n          itemCount++);\r\n\r\n      System.out.println(productLog.toString());\r\n\r\n    }\r\n  }\r\n\r\n  public ComboBox<Integer> getComboBox() {\r\n    return comboBox;\r\n  }\r\n\r\n  public void setComboBox(ComboBox<Integer> comboBox) {\r\n    this.comboBox = comboBox;\r\n  }\r\n\r\n  void retrieveComboBoxDetails() {\r\n    int comboNumber = Integer.parseInt(String\r\n        .valueOf(comboBox.getValue()));\r\n\r\n    if (comboNumber < 0 || comboNumber > 10) {\r\n      comboBox.setValue(0);\r\n    }\r\n  }\r\n\r\n  public void productionLog() {\r\n    formatTextArea();\r\n    retrieveComboBoxDetails();\r\n    productionTest();\r\n  }\r\n\r\n  /**\r\n   * This method initialize runs automatically as the program is started. This method populates\r\n   * numbers to the comboBox This method populates enum values into the combo box.\r\n   */\r\n\r\n  void setCellFactory() {\r\n    productNameCol.setCellValueFactory(new PropertyValueFactory(\"name\"));\r\n\r\n    manufactureNameCol.setCellValueFactory(new PropertyValueFactory(\"manufacturer\"));\r\n\r\n    typeNameCol.setCellValueFactory(new PropertyValueFactory(\"type\"));\r\n  }\r\n\r\n  void comboBoxValues() {\r\n    for (int i = 0; i <= 10; i++) {\r\n      comboBox.getItems().add(i);\r\n    }\r\n    comboBox.setValue(5);\r\n  }\r\n\r\n  void setItemValues() {\r\n    itemType.getItems()\r\n        .addAll(AUDIO, ItemType.VISUAL, ItemType.AUDIO_MOBILE, ItemType.VISUAL_MOBILE);\r\n\r\n    productTableView.setItems(productLine);\r\n    listView.setItems(produceline);\r\n  }\r\n\r\n  public void initialize() throws IOException {\r\n    comboBoxValues();\r\n    setItemValues();\r\n    populateList();\r\n    setCellFactory();\r\n    productionAreaLog();\r\n  }\r\n  /**\r\n   * This method populate list is currently an empty method that will be used populate information\r\n   * from the database.\r\n   */\r\n\r\n  public void populateList() throws IOException {\r\n\r\n    database.getProp().load(new FileInputStream(\"res/properties\"));\r\n\r\n    try (OutputStream output = new FileOutputStream(\"res/properties\")) {\r\n      database.getProp().store(output, null);\r\n      database.openDatabase();\r\n      database.stmt.executeQuery(\"SELECT * FROM PRODUCT\");\r\n      ResultSet rs = database.getStmt().executeQuery(\"SELECT * FROM PRODUCT\");\r\n\r\n      while (rs.next()) {\r\n\r\n        String name = rs.getString(2);\r\n\r\n        String manufacturer = rs.getString(4);\r\n\r\n        String type = rs.getString(3);\r\n\r\n        ItemType temp;\r\n\r\n        switch (type) {\r\n          case \"AUDIO\":\r\n\r\n            temp = AUDIO;\r\n\r\n            break;\r\n          case \"VISUAL\":\r\n\r\n            temp = VISUAL;\r\n\r\n            break;\r\n          case \"AUDIO_MOBILE\":\r\n\r\n            temp = AUDIO_MOBILE;\r\n\r\n            break;\r\n          case \"VISUAL_MOBILE\":\r\n\r\n            temp = VISUAL_MOBILE;\r\n\r\n            break;\r\n          default:\r\n            temp = NULL;\r\n\r\n            break;\r\n        }\r\n        if (manufacturer.equals(\"\")) {\r\n\r\n          manufacturer = \"ERROR\";\r\n\r\n        }\r\n        if (rs.getString(2).equals(\"\")) {\r\n\r\n          name = \"ERROR\";\r\n        }\r\n        String id = rs.getString(1);\r\n\r\n        Product productFromDB = new Widget(Integer.parseInt(id), name, manufacturer,\r\n            temp);\r\n\r\n        productLine.add(productFromDB);\r\n\r\n        listView.getItems().add(productFromDB);\r\n      }\r\n      database.closeDatabase();\r\n    } catch (SQLException e) {\r\n      e.printStackTrace();\r\n    }\r\n  }\r\n  /**\r\n   * This method prints \" Test for Record Production button\" This methods prints to the console to\r\n   * ensure that the method and button is working properly.\r\n   *\r\n   * @param event1 This method currently * prints to the console\r\n   */\r\n  @FXML\r\n  void recordProductionButton(MouseEvent event1) throws IOException {\r\n    productionLog();\r\n    initializeProductionRecordDB();\r\n  }\r\n  /**\r\n   * This method initializes the combo box.\r\n   */\r\n  @FXML\r\n  public void initializeValue() {\r\n\r\n    comboBox.setEditable(true);  // creates an editable comboBox\r\n  }\r\n  /**\r\n   * created a new ProductionRecord Database to store information the the Production record.\r\n   */\r\n\r\n  public void initializeProductionRecordDB() throws IOException {\r\n\r\n    database.openDatabase();\r\n    database.getProp().load(new FileInputStream(\"res/properties\"));\r\n\r\n    try {\r\n\r\n      formatTextArea();\r\n\r\n      retrieveComboBoxDetails();\r\n\r\n      Product listItems = listView.getSelectionModel()\r\n\r\n          .getSelectedItem();\r\n\r\n      ProductionRecord product = new ProductionRecord(listItems.getId());\r\n\r\n      int numCount = 0;\r\n      for (int productionRunProduct = 0; productionRunProduct < Integer.parseInt(String\r\n          .valueOf(comboBox.getValue()));\r\n          productionRunProduct++) {\r\n\r\n        database.stmt.executeUpdate(\r\n            \"INSERT INTO PRODUCTIONRECORD\"\r\n                + \"(PRODUCT_ID, PRODUCTION_NUM, SERIAL_NUM,DATE_PRODUCED)\" + \"VALUES ( '\"\r\n                + listItems.getId() + \"', '\" + numCount + \"', '\" + listItems.getManufacturer()\r\n                .substring(0, 3)\r\n                + listItems.getType().code + \"0000\" + product.itemCount + \"', '\" + product.ts\r\n                + \"' )\");\r\n\r\n        numCount++;\r\n        textArea.appendText(\r\n\r\n            \" Prod. Num: \" + numCount + \" Product ID: \" + listItems.getId() + \" Serial Num: \"\r\n                + listItems.getManufacturer()\r\n                .substring(0, 3)\r\n                + listItems.getType().code + \"0000\" + product.itemCount + \" Date: \" + product.ts\r\n                + \"\\n\");\r\n      }\r\n    } catch (SQLException e) {\r\n      e.printStackTrace();\r\n    }\r\n  }\r\n  /**\r\n   * This will be a new method that updates the text area with the production record log. This\r\n   * method reads information from the Production Record database\r\n   */\r\n\r\n  public void productionAreaLog() throws IOException {\r\n\r\n    try {\r\n\r\n      database.openDatabase();\r\n\r\n      String sql = \"SELECT * FROM PRODUCTIONRECORD\";\r\n\r\n      ResultSet rs = database.getStmt().executeQuery(sql);\r\n\r\n      while (rs.next()) {\r\n\r\n        String prodId = rs.getString(1);\r\n\r\n        String prodNum = rs.getString(2);\r\n\r\n        String serialNum = rs.getString(3);\r\n\r\n        String prodDate = rs.getString(4);\r\n\r\n        textArea.appendText(\r\n\r\n            \" Prod. Num: \" + prodNum + \" Product ID: \" + prodId + \" Serial Num:\" + serialNum\r\n                + \" Date: \"\r\n                + prodDate + \"\\n\");\r\n\r\n        textArea.setFont(new Font(\"Serif\", 12)); // sets text area font to Serif and font size to 12\r\n      }\r\n      database.closeDatabase();\r\n    } catch (SQLException e) {\r\n      e.printStackTrace();\r\n    }\r\n  }\r\n\r\n  @FXML\r\n  void playMediainfo(MouseEvent event2) {\r\n    testMultimedia();\r\n  }\r\n\r\n  /**\r\n   * This is a method called test multimedia to demonstrate functionality in the code.\r\n   */\r\n  public void testMultimedia() {\r\n    AudioPlayer newAudioProduct = new AudioPlayer(\"DP-X1A\", \"Onkyo\",\r\n        \"DSD/FLAC/ALAC/WAV/AIFF/MQA/Ogg-Vorbis/MP3/AAC\", \"M3U/PLS/WPL\");\r\n    Screen newScreen = new Screen(\"720x480\", 40, 22);\r\n    MoviePlayer newMovieProduct = new MoviePlayer(\"DBPOWER MK101\", \"OracleProduction\", newScreen,\r\n        MonitorType.LCD);\r\n    ArrayList<MultimediaControl> productList = new ArrayList<MultimediaControl>();\r\n    productList.add(newAudioProduct);\r\n    productList.add(newMovieProduct);\r\n    for (MultimediaControl p : productList) {\r\n      System.out.println(p);\r\n      p.play();\r\n      p.stop();\r\n      p.next();\r\n      p.previous();\r\n      mediaTextArea\r\n          .setFont(new Font(\"Serif\", 12));\r\n      mediaTextArea.appendText(String.valueOf(p));\r\n    }\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/productionproject/Controller.java	(revision 498c4957addaea33ab413fecfe14b3ad48b5161f)
+++ src/productionproject/Controller.java	(date 1607308430122)
@@ -88,7 +88,7 @@
 
   ObservableList<Product> produceline = FXCollections.observableArrayList();
   @FXML
-  private
+  private final
   ListView<Product> listView = new ListView<>(produceline);
   @FXML
   private TextArea mediaTextArea;
@@ -127,11 +127,11 @@
   }
 
   void clearInputField() {
-    productInputField.setText("");   // clears text field
+    productInputField.setText("");
 
-    manufactureInputField.setText("");  // clears text field
+    manufactureInputField.setText("");
 
-    itemType.setValue(null); // clears Choice Box field
+    itemType.setValue(null);
   }
 
   /**
